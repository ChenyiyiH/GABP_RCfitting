function [y1] = predict16(x1)
%PREDICT16 neural network simulation function.
%
% Auto-generated by MATLAB, 16-Oct-2024 10:47:42.
% 
% [y1] = predict16(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [651.846770048925;12.874363265874];
x1_step1.gain = [0.00432144369792258;0.163715869929865];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.54360352808212941689;1.1902435348314976959;-0.80617706344069972602;-0.76368811915797385481;1.0045852189506325747];
IW1_1 = [2.5822548330212429235 2.5714308423084224486;2.257589571049420929 1.1298073641334034356;0.65648970512046367354 -1.1698943471667528904;-1.0896382870807799215 -0.73088542388817634432;1.3702511964421584256 -0.31306026585618002001];

% Layer 2
b2 = [-0.4743244830846048421;0.8046442889497520401];
LW2_1 = [1.0077834955597249067 0.070642980015587816811 -0.38065862893315915993 0.091946783747497387584 0.41515480419901901188;0.31127083433574015414 0.80626733098207026273 -0.31502106023191200901 1.9122773639737611351 -1.0591726237209868611];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [4.08163265306122;0.0689655172413794];
y1_step1.xoffset = [0.25;20];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
